package Practice;

public class TreeNode {
	public TreeNode left;
	public TreeNode right;
	public int value;
	
	public TreeNode(int v) {
		this.value = v;
		this.left = this.right = null;
	}
	public TreeNode search(int v) {
		TreeNode current = this;
		while(current != null) {
			if(current.value == v) {
				return current;
			} else if(v < current.value) {
				current = current.left;
			} else {
				current = current.right;
			}
		}
		return null;
	}
	
	public void insert(int v) {
		TreeNode current = this;
		TreeNode parent = null;
		
		while(current != null) {
			if(current.value == v) {
				current.value = v;
				return;
			} else if(v < current.value) {
				parent = current;
				current = current.left;
			} else {
				parent = current;
				current = current.right;
			}
		}
		
		TreeNode addNode = new TreeNode(v);
		
		if(addNode.value < parent.value) {
			parent.left = addNode;
		} else {
			parent.right = addNode;
		}
	}
	
	public void visit(TreeNode t) {
		System.out.println(t.value);
	}	
	
	public void printAll() {
		System.out.println("preorder");
		preorder(this);
		System.out.println("inorder");
		inorder(this);
		System.out.println("postorder");
		postorder(this);
	}
	
	public void preorder(TreeNode t) {
		if(t != null) {
			visit(t);
			preorder(t.left);
			preorder(t.right);
		}
	}
	
	public void inorder(TreeNode t) {
		if(t != null) {
			inorder(t.left);
			visit(t);
			inorder(t.right);
		}
	}
	
	public void postorder(TreeNode t) {
		if(t != null) {
			postorder(t.left);
			postorder(t.right);
			visit(t);
		}
	}
	
	public void delete(int v) {
		TreeNode curr = this;
		TreeNode parent = null;
		TreeNode child = null;
		
		while(curr != null && curr.value != v) {
			parent = curr;
			if(v > curr.value) {
				curr = curr.right;
			} else {
				curr = curr.left;
			}
		}
		
		if(curr == null) {
			return;
		}
		
		if(curr == parent.right) {
			parent.right = null;
		} else {
			parent.left = null
		}
		
	}

	public static void main(String[] args) {
		TreeNode t = new TreeNode(5);
		t.insert(5);
		t.insert(3);
		t.insert(7);
		t.insert(2);
		t.insert(4);
		t.insert(9);
		
		t.printAll();
	}
}